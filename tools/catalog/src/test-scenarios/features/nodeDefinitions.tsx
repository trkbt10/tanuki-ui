import { createNodeDefinition, type NodeDefinition } from "tanuki-ui/extended/node-editor";
import {
  CustomCardRenderer,
  ProgressBarRenderer,
  CodeBlockRenderer,
  ImageGalleryRenderer,
  DataVisualizationRenderer,
} from "./renderers";
import {
  CustomCardInspector,
  ProgressBarInspector,
  CodeBlockInspector,
  ImageGalleryInspector,
  DataVisualizationInspector,
} from "./inspectors";

export const featuresNodeDefinitions: NodeDefinition[] = [
  createNodeDefinition({
    type: "custom-card",
    displayName: "Custom Card",
    description: "A customizable card node with icon, status and description",
    category: "UI Components",
    icon: "üìÑ",
    defaultSize: { width: 200, height: 120 },
    defaultData: {
      title: "Custom Card",
      description: "A sample card node",
      icon: "üìÑ",
      status: "active",
    },
    ports: [
      { id: "status-input", type: "input", label: "Status", position: "left", dataType: "string" },
      { id: "data-input", type: "input", label: "Data", position: "left", dataType: "any" },
      { id: "card-output", type: "output", label: "Output", position: "right", dataType: "object" },
    ],
    renderNode: CustomCardRenderer,
    renderInspector: CustomCardInspector,
  }),
  createNodeDefinition({
    type: "progress-bar",
    displayName: "Progress Bar",
    description: "Visual progress indicator with customizable ranges",
    category: "Data Visualization",
    icon: "üìä",
    defaultSize: { width: 180, height: 100 },
    defaultData: {
      title: "Progress Bar",
      progress: 45.5,
    },
    ports: [
      { id: "progress-input", type: "input", label: "Progress", position: "left", dataType: "number" },
      { id: "max-input", type: "input", label: "Max", position: "left", dataType: "number" },
      { id: "progress-output", type: "output", label: "Percent", position: "right", dataType: "number" },
    ],
    renderNode: ProgressBarRenderer,
    renderInspector: ProgressBarInspector,
  }),
  createNodeDefinition({
    type: "code-block",
    displayName: "Code Block",
    description: "Code snippet with syntax highlighting and execution simulation",
    category: "Development",
    icon: "üíª",
    defaultSize: { width: 220, height: 140 },
    defaultData: {
      title: "Code Snippet",
      language: "javascript",
      code: "console.log('Hello World!');",
      output: "Hello World!",
    },
    ports: [
      { id: "code-input", type: "input", label: "Code", position: "left", dataType: "string" },
      { id: "execute-trigger", type: "input", label: "Execute", position: "left", dataType: "boolean" },
      { id: "result-output", type: "output", label: "Result", position: "right", dataType: "string" },
      { id: "error-output", type: "output", label: "Error", position: "right", dataType: "string" },
    ],
    renderNode: CodeBlockRenderer,
    renderInspector: CodeBlockInspector,
  }),
  createNodeDefinition({
    type: "image-gallery",
    displayName: "Image Gallery",
    description: "Interactive image gallery with navigation controls",
    category: "Media",
    icon: "üñºÔ∏è",
    defaultSize: { width: 160, height: 140 },
    defaultData: {
      title: "Image Gallery",
      images: [
        { id: "img1", emoji: "üåÖ", name: "Landscape 1" },
        { id: "img2", emoji: "üé®", name: "Art 1" },
        { id: "img3", emoji: "üì∑", name: "Photo 1" },
      ],
      currentIndex: 0,
    },
    ports: [
      { id: "index-input", type: "input", label: "Index", position: "left", dataType: "number" },
      { id: "prev-trigger", type: "input", label: "Previous", position: "left", dataType: "boolean" },
      { id: "next-trigger", type: "input", label: "Next", position: "left", dataType: "boolean" },
      { id: "current-output", type: "output", label: "Current", position: "right", dataType: "object" },
      { id: "total-output", type: "output", label: "Total", position: "right", dataType: "number" },
    ],
    renderNode: ImageGalleryRenderer,
    renderInspector: ImageGalleryInspector,
  }),
  createNodeDefinition({
    type: "data-visualization",
    displayName: "Data Chart",
    description: "Live data visualization with bar chart representation",
    category: "Data Visualization",
    icon: "üìà",
    defaultSize: { width: 200, height: 120 },
    defaultData: {
      title: "Data Chart",
      chartData: [45, 78, 23, 89, 56, 34, 67, 90],
    },
    ports: [
      { id: "data-input", type: "input", label: "Data", position: "left", dataType: "array" },
      { id: "update-trigger", type: "input", label: "Update", position: "left", dataType: "boolean" },
      { id: "stats-output", type: "output", label: "Stats", position: "right", dataType: "object" },
      { id: "max-output", type: "output", label: "Max", position: "right", dataType: "number" },
    ],
    renderNode: DataVisualizationRenderer,
    renderInspector: DataVisualizationInspector,
  }),
  // Standard utility nodes for connecting to custom nodes
  createNodeDefinition({
    type: "data-source",
    displayName: "Data Source",
    description: "Provides configurable data output",
    category: "Data",
    icon: "üî¢",
    defaultSize: { width: 150, height: 80 },
    defaultData: {
      title: "Data Source",
      value: 42,
      dataType: "number",
    },
    ports: [{ id: "output", type: "output", label: "Value", position: "right", dataType: "any" }],
  }),
  createNodeDefinition({
    type: "trigger-button",
    displayName: "Trigger",
    description: "Manual trigger for events and updates",
    category: "Control",
    icon: "üîò",
    defaultSize: { width: 120, height: 60 },
    defaultData: {
      title: "Trigger",
      buttonText: "Execute",
    },
    ports: [{ id: "trigger-output", type: "output", label: "Trigger", position: "right", dataType: "boolean" }],
  }),
  createNodeDefinition({
    type: "text-input",
    displayName: "Text Input",
    description: "Configurable text input source",
    category: "Data",
    icon: "üìù",
    defaultSize: { width: 160, height: 80 },
    defaultData: {
      title: "Text Input",
      text: "Sample text",
    },
    ports: [{ id: "text-output", type: "output", label: "Text", position: "right", dataType: "string" }],
  }),
  createNodeDefinition({
    type: "data-monitor",
    displayName: "Monitor",
    description: "Displays incoming data for debugging",
    category: "Debug",
    icon: "üì∫",
    defaultSize: { width: 150, height: 100 },
    defaultData: {
      title: "Data Monitor",
      lastValue: null,
    },
    ports: [
      { id: "data-input", type: "input", label: "Data", position: "left", dataType: "any" },
      { id: "monitor-output", type: "output", label: "Pass Through", position: "right", dataType: "any" },
    ],
  }),
];
