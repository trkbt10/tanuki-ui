/* Base container moved to components/NodeEditorBase.module.css */

.container {
  width: 100%;
  height: 100%;
  position: relative;
  overflow: hidden;
  background-color: var(--windowBackgroundColor, #f5f5f5);
  user-select: none;
  padding-bottom: 24px;
  /* Space for status bar */
  box-sizing: border-box;
}

/* Canvas element styles moved to components/CanvasBase.module.css */

.nodes {
  position: relative;
  width: 100%;
  height: 100%;
  z-index: 10;
  /* Above connections */
}

.node {
  position: absolute;
  background-color: var(--controlBackground, #ffffff);
  border: var(--inputBorder);
  border-radius: .5em;
  box-shadow: 0 2px .5em rgba(0, 0, 0, 0.1);
  min-width: 150px;
  min-height: 50px;
  cursor: move;
  transition: box-shadow 0.2s;
}

.node:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.node.locked {
  opacity: 0.7;
  cursor: not-allowed;
  border-color: var(--cautionColor, #ff3b30);
}

.node.locked:hover {
  box-shadow: 0 2px .5em rgba(255, 59, 48, 0.2);
}

.node.selected {
  border-color: var(--accentColor, #0066cc);
  box-shadow: 0 0 0 2px rgba(0, 102, 204, 0.2);
}

.node.dragging {
  opacity: 0.8;
  cursor: grabbing;
}

.nodeHeader {
  position: relative;
  padding: .5em 12px;
  font-weight: 500;
  border-bottom: var(--inputBorder);
  background-color: var(--tableHeaderBackgroundColor, #f0f0f0);
  border-radius: .5em .5em 0 0;
  height: 40px;
  display: flex;
  align-items: center;
  box-sizing: border-box;
}

.nodeHeader.interactiveDragHandle {
  cursor: move;
  background-color: var(--tableHeaderBackgroundColorHover, #e5e5e5);
  transition: background-color 0.2s ease;
}

.nodeHeader.interactiveDragHandle:hover {
  background-color: var(--tableHeaderBackgroundColorActive, #d8d8d8);
}

.nodeHeader.interactiveDragHandle::before {
  content: "⋮⋮";
  position: absolute;
  left: 4px;
  top: 50%;
  transform: translateY(-50%);
  font-size: 10px;
  color: var(--secondaryLabelColor, #999);
  opacity: 0.6;
  pointer-events: none;
  letter-spacing: -2px;
}

.nodeHeaderInput {
  width: 100%;
  padding: 4px .5em;
  border: 1px solid var(--accentColor, #0066cc);
  border-radius: 4px;
  background-color: var(--windowBackgroundColor, #ffffff);
  font-weight: 500;
  font-size: inherit;
  font-family: inherit;
  outline: none;
  box-sizing: border-box;
}

.lockIcon {
  position: absolute;
  top: 4px;
  right: 4px;
  font-size: 12px;
  opacity: 0.8;
  pointer-events: none;
}

.nodeContent {
  padding: 12px;
  box-sizing: border-box;
}

.groupNode {
  background-color: rgba(255, 255, 255, 0.5);
  border-style: dashed;
  border-width: 2px;
  opacity: 0.8;
}

.groupNode.collapsed .nodeContent {
  display: none;
}

.groupCollapsed {
  text-align: center;
  color: var(--secondaryLabelColor, #666);
  font-style: italic;
}

.groupExpanded {
  /* moved to components/node/NodeView.module.css */
}

/* Node visual variants moved to components/node/NodeView.module.css */

/* Removed duplicate selectionBox - using selectionBoxOverlay instead */

.toolbar {
  position: absolute;
  top: 16px;
  left: 16px;
  display: flex;
  gap: .5em;
  background-color: var(--controlBackground, #ffffff);
  border: var(--inputBorder);
  border-radius: .5em;
  padding: .5em;
  box-shadow: 0 2px .5em rgba(0, 0, 0, 0.1);
  box-sizing: border-box;
}

/* Toolbar button styles moved to components/Toolbar.module.css */

.contextMenu {
  position: absolute;
  background-color: var(--controlBackground, #ffffff);
  border: var(--inputBorder);
  border-radius: .5em;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  padding: 4px;
  min-width: 150px;
  box-sizing: border-box;
}

.contextMenuItem {
  padding: .5em 12px;
  cursor: pointer;
  border-radius: 4px;
  transition: background-color 0.2s;
  box-sizing: border-box;
}

.contextMenuItem:hover {
  background-color: var(--controlHoverBackground, #f5f5f5);
}

.grid {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: linear-gradient(rgba(0, 0, 0, 0.05) 1px, transparent 1px),
    linear-gradient(90deg, rgba(0, 0, 0, 0.05) 1px, transparent 1px);
  background-size: 20px 20px;
  opacity: 0.5;
}

/* Inspector styles moved to components/InspectorPanel.module.css */

.inspectorRow {
  display: flex;
  gap: .5em;
}

.inspectorRow input {
  flex: 1;
}

.editorWithInspector {
  display: flex;
  width: 100%;
  height: 100%;
}

.editorMain {
  flex: 1;
  position: relative;
}

.externalDataInfo {
  padding: .5em;
  background-color: var(--controlHoverBackground, #f5f5f5);
  border-radius: 4px;
  font-size: 12px;
  margin-bottom: .5em;
  box-sizing: border-box;
}

.externalDataInfo>div {
  margin-bottom: 4px;
}

/* Drag guides */
.dragGuides {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1000;
}

.dragGuide {
  position: absolute;
  background-color: var(--accentColor, #0066cc);
  pointer-events: none;
  opacity: 0.7;
}

.dragGuideVertical {
  width: 1px;
  height: 100%;
}

.dragGuideHorizontal {
  width: 100%;
  height: 1px;
}

.snapTarget {
  position: absolute;
  width: .5em;
  height: .5em;
  background-color: var(--accentColor, #0066cc);
  border-radius: 50%;
  transform: translate(-4px, -4px);
  pointer-events: none;
  opacity: 0.8;
}

.distanceIndicator {
  position: absolute;
  pointer-events: none;
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 10px;
  font-weight: 500;
  white-space: nowrap;
  z-index: 1001;
  box-sizing: border-box;
}

.distanceLine {
  position: absolute;
  border-top: 1px dashed var(--secondaryLabelColor, #666);
  pointer-events: none;
  opacity: 0.6;
}

/* Status bar styles moved to components/StatusBar.module.css and parts/StatusSection.module.css */

/* Port styles */
.nodePort {
  position: absolute;
  width: 16px;
  height: 16px;
  border-radius: 50%;
  background-color: var(--controlBackground, #ffffff);
  border: 3px solid red;
  /* Temporary: make ports visible */
  cursor: crosshair;
  transition: transform 0.1s ease, box-shadow 0.1s ease;
  z-index: 100;
  /* Increased z-index */
  box-shadow: 0 0 4px rgba(0, 0, 0, 0.5);
  /* Add shadow for visibility */
}

.nodePort:hover {
  transform: scale(1.2);
  border-color: var(--accentColor, #0066cc);
}

.nodePort.portInput {
  border-color: var(--nodePortInputColor, #66cc00);
}

.nodePort.portOutput {
  border-color: var(--nodePortOutputColor, #0099ff);
}

.portInner {
  position: absolute;
  top: 50%;
  left: 50%;
  width: .5em;
  height: .5em;
  background-color: var(--inputBorder, #999);
  border-radius: 50%;
  transform: translate(-50%, -50%);
  transition: background-color 0.2s;
}

.nodePort:hover .portInner {
  background-color: var(--accentColor, #0066cc);
}

.nodePort.portInput .portInner {
  background-color: var(--nodePortInputColor, #66cc00);
}

.nodePort.portOutput .portInner {
  background-color: var(--nodePortOutputColor, #0099ff);
}

.portLabel {
  position: absolute;
  white-space: nowrap;
  font-size: 11px;
  color: var(--secondaryLabelColor, #666);
  pointer-events: none;
  user-select: none;
}

.portLeft .portLabel {
  right: 20px;
  top: 50%;
  transform: translateY(-50%);
  text-align: right;
}

.portRight .portLabel {
  left: 20px;
  top: 50%;
  transform: translateY(-50%);
}

.portTop .portLabel {
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  text-align: center;
}

.portBottom .portLabel {
  top: 20px;
  left: 50%;
  transform: translateX(-50%);
  text-align: center;
}

/* Connection overlay styles */
.connections {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 5;
  /* Higher than nodes but below floating elements */
}

.connections svg {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: visible;
  pointer-events: none;
  /* SVG container should not block events */
}

/* Dash animation for drag connections */
@keyframes dashAnimation {
  to {
    stroke-dashoffset: -10;
  }
}

.inspectorTabs {
  display: flex;
  gap: .5em;
  padding: 0;
}

.inspectorTab {
  flex: 1;
  padding: .5em 1em;
  background: transparent;
  border: none;
  border-bottom: 2px solid transparent;
  font-size: 13px;
  font-weight: 500;
  color: var(--secondaryLabelColor, #666);
  cursor: pointer;
  transition: all 0.2s ease;
}

.inspectorTab:hover {
  color: var(--labelColor, #000);
  background: var(--quaternarySystemFillColor, rgba(0, 0, 0, 0.04));
}

.inspectorTab.active {
  color: var(--accentColor, #007AFF);
  border-bottom-color: var(--accentColor, #007AFF);
  background: transparent;
}

.inspectorTab.active:hover {
  background: var(--quaternarySystemFillColor, rgba(0, 0, 0, 0.04));
}

.inspectorContentNoPadding {
  padding: 0;
}


.inspectorSection h4 {
  margin: 0 0 12px 0;
  font-size: 12px;
  font-weight: 600;
  color: var(--secondaryLabelColor, #666);
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.inspectorField {
  margin-bottom: 12px;
}

.inspectorField label {
  display: block;
  margin-bottom: 4px;
  font-size: 12px;
  font-weight: 500;
  color: var(--textColor, #000);
}

.inspectorInput,
.inspectorTextarea {
  width: 100%;
  padding: 3px .25em !important;
  border: var(--inputBorder, 1px solid #c8c8c8) !important;
  border-radius: 4px;
  font-size: 12px;
  background: var(--controlBackground, #ffffff);
  color: var(--textColor, #000);
  box-sizing: border-box;
}

.inspectorInput:focus,
.inspectorTextarea:focus {
  outline: none;
  border-color: var(--accentColor, #007aff);
}

.inspectorTextarea {
  resize: vertical;
  min-height: 60px;
}

.inspectorPositionInputs {
  display: flex;
  gap: .5em;
}

.inspectorNumberInput {
  flex: 1;
  /* Compact padding for small width usability */
  padding: 3px .25em !important;
  border: var(--inputBorder, 1px solid #c8c8c8) !important;
  border-radius: 4px;
  font-size: 12px;
  background: var(--controlBackground, #ffffff);
  color: var(--textColor, #000);
  box-sizing: border-box;
  min-width: 0;
  /* Allow shrinking inside flex container */
}

.inspectorNumberInput:focus {
  outline: none;
  border-color: var(--accentColor, #007aff);
}

.inspectorInput:hover,
.inspectorTextarea:hover,
.inspectorNumberInput:hover {
  border-color: var(--inputBorderHover, #bdbdbd);
}

/* Unified section title for inspector */
.inspectorSectionTitle {
  margin: 0 0 8px 0;
  font-size: 12px;
  font-weight: 600;
  color: var(--secondaryLabelColor, #666);
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.inspectorReadOnlyField {
  display: block;
  padding: 6px .5em;
  font-size: 12px;
  color: var(--secondaryLabelColor, #666);
  background: var(--tertiarySystemBackground, #f9f9f9);
  border-radius: 4px;
  border: var(--inputBorder);
  box-sizing: border-box;
}

.inspectorEmptyState {
  text-align: center;
  padding: 32px 16px;
  color: var(--secondaryLabelColor, #666);
  font-size: 12px;
  box-sizing: border-box;
}

/* Canvas container/grid styles moved to components/CanvasBase.module.css */

/* Editor Layout */
.editorLayout {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  position: relative;
}

.editorToolbar {
  flex: 0 0 auto;
  background: var(--controlBackground, #ffffff);
  border-bottom: var(--inputBorder);
  padding: .5em 16px;
  display: flex;
  align-items: center;
  min-height: 4.5em;
  box-sizing: border-box;
}

.editorContent {
  flex: 1;
  display: flex;
  position: relative;
  overflow: hidden;
}

.editorMain {
  flex: 1;
  position: relative;
  overflow: hidden;
}

.editorSidebar {
  flex: 0 0 auto;
}

/* Top Toolbar */
/* Top toolbar styles moved to components/Toolbar.module.css */

/* Node layer styles moved to components/node/NodeLayer.module.css */

/* Node view styles moved to components/node/NodeView.module.css */

/* Port styles moved to components/connection/ports/PortView.module.css */

/* Connection styles moved to components/connection/*.module.css */

/* Selection overlay styles moved to components/parts */

/* Loading/Saving Overlay */
.loadingOverlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2000;
}

.loadingIndicator {
  background-color: var(--controlBackground, #ffffff);
  border: var(--inputBorder);
  border-radius: .5em;
  padding: 16px 32px;
  font-size: 14px;
  color: var(--controlTextColor, #000000);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  box-sizing: border-box;
}

/* Custom Node Content */
.customNodeContent {
  width: 100%;
  height: 100%;
  position: relative;
}

/* Resize Handles - Transparent by default, accent color fill on hover */
.resizeHandle {
  position: absolute;
  background-color: transparent;
  border: none;
  opacity: 0;
  transition: opacity 0.1s ease, transform 0.1s ease, background-color 0.1s ease;
  z-index: 15;
  pointer-events: all;
  /* Corner-specific border radius - only bottom-right is rounded */
  border-radius: 0 0 4px 0;
}

/* Show handle when node is hovered or selected */
.nodeView:hover .resizeHandle,
.nodeView.selected .resizeHandle {
  opacity: 0.6;
}

/* Accent color fill on hover */
.resizeHandle:hover {
  background-color: var(--accentColor, #007aff);
  opacity: 1;
  transform: scale(1.1);
}

/* Active state during resize */
.resizeHandleActive {
  background-color: var(--accentColor, #007aff);
  opacity: 1;
  transform: scale(1.1);
}


/* Minimap Styles */
.minimapContainer {
  position: absolute;
  top: 16px;
  right: 16px;
  z-index: 100;
  pointer-events: all;
}

.minimap {
  width: 200px;
  background: var(--controlBackground, rgba(255, 255, 255, 0.9));
  border: var(--inputBorder);
  border-radius: .5em;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  backdrop-filter: blur(.5em);
  overflow: hidden;
}

.minimapTitle {
  padding: .5em 12px;
  background: var(--tableHeaderBackgroundColor, #f0f0f0);
  font-size: 12px;
  font-weight: 600;
  color: var(--textColor, #000);
  border-bottom: var(--inputBorder);
}

.minimapContent {
  padding: 12px;
}

.minimapViewport,
.minimapNodes {
  font-size: 11px;
  color: var(--secondaryLabelColor, #666);
  margin-bottom: 4px;
}

.minimapViewport:last-child,
.minimapNodes:last-child {
  margin-bottom: 0;
}

/* Theme-specific styles */
.darkTheme {
  background-color: var(--darkBackgroundColor, #1e1e1e);
  color: var(--darkTextColor, #ffffff);
}

.darkTheme .minimap {
  background: var(--darkControlBackground, rgba(42, 42, 42, 0.9));
  border-color: var(--darkInputBorder, #444);
}

.darkTheme .minimapTitle {
  background: var(--darkTableHeaderBackground, #333);
  color: var(--darkTextColor, #ffffff);
  border-bottom-color: var(--darkInputBorder, #444);
}

.darkTheme .minimapViewport,
.darkTheme .minimapNodes {
  color: var(--darkSecondaryTextColor, #ccc);
}

/* Smooth animations - selective only for non-performance critical elements */
.smoothAnimations .statusSection {
  transition: opacity 0.2s ease;
}

.smoothAnimations .minimap {
  transition: opacity 0.2s ease;
}

/* Remove all transform transitions to prevent janky movement */

/* Disable all transitions during drag operations for smooth experience */
.nodeView.dragging,
.nodeView.dragging * {
  transition: none !important;
}

/* Status bar saving indicator */
.statusSaving {
  color: var(--accentColor, #007aff);
  font-weight: 600;
}

/* UI Overlay Container - Fixed position, non-interactive overlay for UI customization */
.uiOverlayContainer {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
  /* Never trap events - allows interaction with underlying elements */
  z-index: 2000;
  /* Above everything else in the editor */
  overflow: visible;
  /* Ensure children can be positioned absolutely within this container */
}

/* Allow individual UI overlay elements to be interactive if needed */
.uiOverlayContainer>* {
  pointer-events: auto;
  /* Children can choose to be interactive */
}

/* TabNav styles moved to components/TabNav.module.css */
