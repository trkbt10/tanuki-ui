name: Create Release Branch

on:
  push:
    branches: [main]
    paths:
      - 'package.json'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No version change detected"
          fi

  create-release:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run type check
        run: bun run typecheck:no-stories

      - name: Build library
        run: bun run build

      - name: Create release branch
        run: |
          RELEASE_BRANCH="release/${{ needs.check-version.outputs.new-version }}"
          git checkout -b "$RELEASE_BRANCH"
          git push origin "$RELEASE_BRANCH"
          echo "Created release branch: $RELEASE_BRANCH"

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ needs.check-version.outputs.new-version }}',
              target_commitish: 'release/${{ needs.check-version.outputs.new-version }}',
              name: 'v${{ needs.check-version.outputs.new-version }}',
              body: 'Release v${{ needs.check-version.outputs.new-version }}',
              draft: false,
              prerelease: false
            });
            console.log('Created release:', release.html_url);